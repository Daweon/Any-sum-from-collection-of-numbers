#include <iostream>
#include <fstream>
#include <time.h>
#include <windows.h>
#include <vector>

using namespace std;

int partition(int tablica[], int p, int r) {
    int x = tablica[p];
    int i = p, j = r, w;
    while (true){
        while (tablica[j] > x){
            j--;
        }
        while (tablica[i] < x){
            i++;
        }
        if (i < j){
            w = tablica[i];
            tablica[i] = tablica[j];
            tablica[j] = w;
            i++;
            j--;
        }
        else
        return j;
    }
}

void quicksort(int tablica[], int p, int r){
    int q;
    if (p < r){
    q = partition(tablica,p,r);
    quicksort(tablica, p, q);
    quicksort(tablica, q+1, r);
    }
}

void counting_solutions_without_repetitions(int *s_o_n,vector <int> solutions, int sum, int index, int n_o_e, int v_o_s, fstream &outputfile,  int &n_o_s){
    index--;
        for (int i=index; i>=0; i--){
            if ((sum+s_o_n[i])==v_o_s){
                n_o_s++;                    // increasing number of solutions
                solutions.push_back(s_o_n[i]);    // adding number as element of solution
                for (int j=0; j<solutions.size(); j++){
                    cout << solutions[j] << " ";        // typing i-th solution
                    outputfile << solutions[j] << " ";  // writing i-th solution to the file
                }
                solutions.pop_back();       // removing last element of solution
                cout << endl;
                outputfile << endl;
            }
            else if ((sum+s_o_n[i])<v_o_s){
                solutions.push_back(s_o_n[i]);                        // adding new element of solution
                sum=sum+s_o_n[i];                // sum of all current elements in solution
                counting_solutions_without_repetitions(s_o_n, solutions, sum, i, n_o_e, v_o_s, outputfile, n_o_s);    // new iteration of finding new element of solution
                sum=sum-s_o_n[i];
                solutions.pop_back();
            }
            else;
        }
}
void counting_solutions_with_repetitions(int *s_o_n,vector <int> solutions, int sum, int index, int n_o_e, int v_o_s, fstream &outputfile,  int &n_o_s){

        for (int i=index; i>=0; i--){
            if ((sum+s_o_n[i])==v_o_s){
                n_o_s++;                    // increasing number of solutions
                solutions.push_back(s_o_n[i]);    // adding number as element of solution
                for (int j=0; j<solutions.size(); j++){
                    cout << solutions[j] << " ";        // typing all solutions
                    outputfile << solutions[j] << " ";  // writing all solutions to the file
                }
                solutions.pop_back();       // removing last element of solution
                cout << endl;
                outputfile << endl;
            }
            else if ((sum+s_o_n[i])<v_o_s){
                solutions.push_back(s_o_n[i]);  // adding new element of solution
                sum=sum+s_o_n[i];                // sum of all current elements in solution
                counting_solutions_with_repetitions(s_o_n, solutions, sum, i, n_o_e, v_o_s, outputfile, n_o_s);    // new iteration of finding new element of solution
                sum=sum-s_o_n[i];
                solutions.pop_back();
            }
            else;
        }
}



int main()
{
    // Generating array of numbers
    std::vector <int> solutions;
    int choice;
    int number=0, set_size=0, b_range, e_range;
    int *set_of_numbers;
    int number_of_solution;
    int *ptr_number_of_solution = &number_of_solution;

    while (true){
        cout << "What do you want to do?:" << endl
        << "1. Generate an array." << endl
        << "2. Create an array." << endl
        << "3. Show last array." << endl
        << "4. Find elements of specific sum."
        << endl << "5. Exit";
        cout << endl;
            if (!(cin >> choice)){
                cerr << "It's not a number!";
                exit(0);
            }


        switch (choice){
            case 1:{
                // Generating an array with random numbers
                do{
                    do{
                    cout << "How many numbers do you want?: ";
                    cin >> set_size;

                    cout << "What is the beginning of the range?: ";
                    cin >> b_range;
                    cout << "What is the end of the range?: ";
                    cin >> e_range;
                    if (set_size<1 || b_range<0 || e_range<0){
                            cout << "Collection size, beginning of the range and end of the range must be positive numbers." << endl;
                        }
                    }while (set_size<1 || b_range<0 || e_range<0);
                    if (e_range-b_range<=0){
                        cout << "Range cannot be zero nor negative." << endl;
                    }
                }while (e_range-b_range<=0);
                int range = e_range-b_range;
                set_of_numbers = new int [set_size];
                srand(time(NULL));
                for (int i=0; i<set_size; i++){
                    set_of_numbers[i] = b_range + rand()%(range+1);
                }
            }
            break;
            case 2:{
                // Generating an array with specific numbers given by user


                do {
                    cout << "How many numbers do you want?: ";
                    cin >> set_size;
                    if (set_size<=0){
                        cout << "Size of set must be a positive number." << endl;
                    }
                }while (set_size<=0 );

                set_of_numbers = new int [set_size];
                for (int i=0; i<set_size; i++){
                    cout << "Give your " << i+1 << " number: " << endl;
                    cin >> set_of_numbers[i];
                    if (set_of_numbers[i]<=1){
                            cout << "Every number of set must be positive." << endl;
                            i--;
                        }
                }
            }
            break;
            case 3:{
                // Showing an array
                if(set_of_numbers == nullptr || set_size == 0){
                    cout << "Array is empty." << endl;
                    break;}
                quicksort(set_of_numbers,0,set_size-1);
                for (int i=0; i<set_size; i++){
                    cout << set_of_numbers[i] << " ";
                }
                cout <<endl;
            }
            break;
            case 4:{
                //Counting all solutions

                // Checking whether array is empty
                if(set_of_numbers == nullptr || set_size == 0){
                    cout << "Array is empty." << endl;
                    cout << endl;
                    break;
                }

                // Sorting array of numbers
                quicksort(set_of_numbers,0,set_size-1);

                // Chosing value of sum
                int numbers_under=0, sum=0, a=0, value_of_sum;
                cout << "What value of which sum do you want to get?" << endl;
                cin >> value_of_sum;
                // Reduction set of numbers to numbers below value of sum
                cout << endl << "All numbers below wanted sum:" << endl;
                while(set_of_numbers[numbers_under]<=value_of_sum){
                    cout << set_of_numbers[numbers_under] << endl;
                    numbers_under++;
                    if (numbers_under>=set_size){
                        break;
                    }
                }

                int sub[numbers_under];
                *ptr_number_of_solution = 0;


                for (int i=0; i<=numbers_under; i++){
                    sub[i]=set_of_numbers[i];
                }
                int choice2;
                cout << "Do you want solutions with repetitions?" << endl
                << "1. No" << endl
                << "2. Yes" << endl;
                if (!(cin >> choice2)){
                cerr << "It's not a number!";
                exit(0);
            }
                switch (choice2){
                    case 1:{
                    fstream outputfile;
                    outputfile.open("solutions.txt",ios::out);

                    cout << endl << "All sums:" << endl;
                    counting_solutions_without_repetitions(sub, solutions, sum, numbers_under, a, value_of_sum, outputfile, number_of_solution);

                    outputfile.close();
                    cout << endl << "Number of solutions: " << *ptr_number_of_solution << endl;

                    break;
                    }
                    case 2:{
                    fstream outputfile;
                    outputfile.open("solutions.txt",ios::out);

                    cout << endl << "All sums:" << endl;
                    counting_solutions_with_repetitions(sub, solutions, sum, numbers_under-1, a, value_of_sum, outputfile, number_of_solution);

                    outputfile.close();
                    cout << endl << "Number of solutions: " << *ptr_number_of_solution << endl;

                    break;
                    }
                default: cout << "Incorrect input";
                break;
                }
            break;
            }

            case 5:{
                exit(0);
            }

            default:{ cout << "Incorrect input";
            break;
            }
        }
    }
    delete set_of_numbers;
    return 0;

}
